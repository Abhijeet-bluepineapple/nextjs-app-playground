name: Assertions and Static Report

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: 'write'

jobs:
  lighthouse-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get Branch Name 
        env:
          GITHUB_CONTEXT: "https://test-lighthouse-report.grille-preview-environment-ugt03go.preflig.ht"
        run: echo "$GITHUB_CONTEXT"
      - name: Test ENV setting
        id: test_env 
        run: |
          RESULT="https://test-lighthouse-report.grille-preview-environment-ugt03go.preflig.ht"
          echo "Domain $RESULT"
          echo "DOMAIN=$RESULT" >> $GITHUB_ENV

      - name: Log Test 
        id: print_env
        run: echo "${RESULT}" && echo "${DOMAIN}"

      - name: Cache Node Modules
        id: cache_node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Dependencies
        run: npm install -g @unlighthouse/cli puppeteer netlify-cli

      - name: Run Unlighthouse CI
        id: unlighthouse
        run: unlighthouse-ci --debug --site "$(echo $DOAMIN)" --build-static --json --output-path=.unlighthouse/

      - name: Upload Unlighthouse Output
        uses: actions/upload-artifact@v3
        with:
          name: unlighthouse-output
          path: .unlighthouse/ci-result.json

      - name: Download Unlighthouse Output
        uses: actions/download-artifact@v3
        with:
          name: unlighthouse-output
          path: .

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const output = JSON.parse(fs.readFileSync('./.unlighthouse/ci-result.json', 'utf8'));

            function formatPath(path) {
              return path
                .replace(/\//g, ' ')  // Remove leading and trailing slashes
                .replace(/-/g, ' ')  // Replace hyphens with spaces
                .replace(/\b\w/g, char => char.toUpperCase()).trim();  // Capitalize each word
            }

            const keys = Object.keys(output[0]);
            const columnNames = keys.map(key => key.replace(/-/g, ' ').replace(/\b\w/g, char => char.toUpperCase()));

            let commentBody = '<h2>Lighthouse Scores</h2>\n';
            commentBody += '<table>\n<tr>' + columnNames.map(name => `<th>${name}</th>`).join('') + '</tr>\n';

            output.forEach(page => {
              const values = keys.map(key => {
                if (key === 'path') {
                  return `<td>${formatPath(page[key])}</td>`;
                } else {
                  const score = (page[key] * 100).toFixed();
                  return score < 90
                    ? `<td style="background-color: red; color: white;">${score}</td>`
                    : `<td>${score}</td>`;
                }
              });
              commentBody += '<tr>' + values.join('') + '</tr>\n';
            });

            commentBody += '</table>\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

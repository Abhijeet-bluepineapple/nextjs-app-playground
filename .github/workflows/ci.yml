name: Assertions and Static Report

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: 'write'

jobs:
  lighthouse-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install -g @unlighthouse/cli puppeteer netlify-cli

      - name: Run Unlighthouse CI
        id: unlighthouse
        run: unlighthouse-ci --build-static --json --output-path=.unlighthouse/

      - name: Upload Unlighthouse Output
        uses: actions/upload-artifact@v3
        with:
          name: unlighthouse-output
          path: .unlighthouse/ci-result.json

      - name: Download Unlighthouse Output
        uses: actions/download-artifact@v3
        with:
          name: unlighthouse-output
          path: .

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const output = JSON.parse(fs.readFileSync('./.unlighthouse/ci-result.json', 'utf8'));
            function formatPath(path) {
              return path
                .replace(/\//g, '')  // Remove leading and trailing slashes
                .replace(/-/g, ' ')  // Replace hyphens with spaces
                .replace(/\b\w/g, char => char.toUpperCase());  // Capitalize each word
            }
            const keys = Object.keys(output[0]);
            const columnNames = keys.map(key => key === 'score' ? 'Overall' : key.replace(/-/g, ' ').replace(/\b\w/g, char => char.toUpperCase()));

            let commentBody = '## Lighthouse Scores\n\n';
            commentBody += '| ' + columnNames.join(' | ') + ' |\n';
            commentBody += '| ' + columnNames.map(() => '------').join(' | ') + ' |\n';

            output.forEach(page => {
              const values = keys.map(key => key === 'path' ? formatPath(page[key]) : (page[key] * 100));
              commentBody += '| ' + values.join(' | ') + ' |\n';
            });
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
